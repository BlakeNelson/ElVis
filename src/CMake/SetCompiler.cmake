


#Get the name of the binary directory
STRING( TOUPPER ${CMAKE_BINARY_DIR} BIN_DIR_NAME )
STRING( FIND ${BIN_DIR_NAME} "/" LAST_DIR_IDX REVERSE )
STRING( SUBSTRING ${BIN_DIR_NAME} LAST_DIR_IDX -1 BIN_DIR_NAME )

SET( GCOV_COMMAND gcov )

SET( GNU_VERSIONS "4.8" "4.9" )
SET( CLANG_VERSIONS "3.4" "3.5" )

IF( BIN_DIR_NAME MATCHES "CLANG" )

  #Try to find the generic version
  FIND_PROGRAM( CMAKE_C_COMPILER clang )
  FIND_PROGRAM( CMAKE_CXX_COMPILER clang++ )

  #Choose a specific version if specified
  FOREACH( VERSION ${CLANG_VERSIONS} )
    STRING( REPLACE "." "" CLANGVERSION "CLANG${VERSION}" )
    IF( BIN_DIR_NAME MATCHES ${CLANGVERSION} )
      FIND_PROGRAM( CMAKE_C_COMPILER clang-${VERSION} )
      FIND_PROGRAM( CMAKE_CXX_COMPILER clang-${VERSION} )
    ENDIF()
  ENDFOREACH()

  #If the specific version was not find, look for all possible versions
  IF( NOT CMAKE_C_COMPILER OR NOT CMAKE_CXX_COMPILER )
    FIND_PROGRAM( CMAKE_C_COMPILER clang )
    FIND_PROGRAM( CMAKE_CXX_COMPILER clang++ )

    FOREACH( VERSION ${CLANG_VERSIONS} )
      IF( NOT CMAKE_C_COMPILER OR NOT CMAKE_CXX_COMPILER )
        FIND_PROGRAM( CMAKE_C_COMPILER clang-${VERSION} )
        FIND_PROGRAM( CMAKE_CXX_COMPILER clang-${VERSION} )
      ENDIF()
    ENDFOREACH()
  ENDIF()

ENDIF()

IF( BIN_DIR_NAME MATCHES "INTEL" )
  SET( CMAKE_C_COMPILER icc )
  SET( CMAKE_CXX_COMPILER icpc )
ENDIF()

IF( BIN_DIR_NAME MATCHES "GNU" )
  #Set to default version if no version is given
  SET( CMAKE_C_COMPILER gcc )
  SET( CMAKE_CXX_COMPILER g++ )

  #Choose a specific version if specified
  FOREACH( VERSION ${GNU_VERSIONS} )
    STRING( REPLACE "." "" GNUVERSION "GNU${VERSION}" )
    IF( BIN_DIR_NAME MATCHES ${GNUVERSION} )
      SET( CMAKE_C_COMPILER gcc-${VERSION} )
      SET( CMAKE_CXX_COMPILER g++-${VERSION} )
      SET( GCOV_COMMAND gcov-${VERSION} )
    ENDIF()
  ENDFOREACH()
ENDIF()
