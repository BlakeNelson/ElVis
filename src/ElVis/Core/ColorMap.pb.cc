// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ColorMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ColorMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

namespace {

const ::google::protobuf::Descriptor* ColorMapBreakpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorMapBreakpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ColorMap_2eproto() {
  protobuf_AddDesc_ColorMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ColorMap.proto");
  GOOGLE_CHECK(file != NULL);
  ColorMapBreakpoint_descriptor_ = file->message_type(0);
  static const int ColorMapBreakpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapBreakpoint, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapBreakpoint, scalar_),
  };
  ColorMapBreakpoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColorMapBreakpoint_descriptor_,
      ColorMapBreakpoint::default_instance_,
      ColorMapBreakpoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColorMapBreakpoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapBreakpoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapBreakpoint, _is_default_instance_));
  ColorMap_descriptor_ = file->message_type(1);
  static const int ColorMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMap, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMap, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMap, breakpoints_),
  };
  ColorMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColorMap_descriptor_,
      ColorMap::default_instance_,
      ColorMap_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColorMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMap, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ColorMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColorMapBreakpoint_descriptor_, &ColorMapBreakpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColorMap_descriptor_, &ColorMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ColorMap_2eproto() {
  delete ColorMapBreakpoint::default_instance_;
  delete ColorMapBreakpoint_reflection_;
  delete ColorMap::default_instance_;
  delete ColorMap_reflection_;
}

void protobuf_AddDesc_ColorMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ElVis::Serialization::protobuf_AddDesc_Color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ColorMap.proto\022\023ElVis.Serialization\032\013C"
    "olor.proto\"O\n\022ColorMapBreakpoint\022)\n\005colo"
    "r\030\001 \001(\0132\032.ElVis.Serialization.Color\022\016\n\006s"
    "calar\030\002 \001(\001\"b\n\010ColorMap\022\013\n\003min\030\001 \001(\002\022\013\n\003"
    "max\030\002 \001(\002\022<\n\013breakpoints\030\003 \003(\0132\'.ElVis.S"
    "erialization.ColorMapBreakpointb\006proto3", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ColorMap.proto", &protobuf_RegisterTypes);
  ColorMapBreakpoint::default_instance_ = new ColorMapBreakpoint();
  ColorMap::default_instance_ = new ColorMap();
  ColorMapBreakpoint::default_instance_->InitAsDefaultInstance();
  ColorMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ColorMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ColorMap_2eproto {
  StaticDescriptorInitializer_ColorMap_2eproto() {
    protobuf_AddDesc_ColorMap_2eproto();
  }
} static_descriptor_initializer_ColorMap_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ColorMapBreakpoint::kColorFieldNumber;
const int ColorMapBreakpoint::kScalarFieldNumber;
#endif  // !_MSC_VER

ColorMapBreakpoint::ColorMapBreakpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElVis.Serialization.ColorMapBreakpoint)
}

void ColorMapBreakpoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  color_ = const_cast< ::ElVis::Serialization::Color*>(&::ElVis::Serialization::Color::default_instance());
}

ColorMapBreakpoint::ColorMapBreakpoint(const ColorMapBreakpoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElVis.Serialization.ColorMapBreakpoint)
}

void ColorMapBreakpoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  color_ = NULL;
  scalar_ = 0;
}

ColorMapBreakpoint::~ColorMapBreakpoint() {
  // @@protoc_insertion_point(destructor:ElVis.Serialization.ColorMapBreakpoint)
  SharedDtor();
}

void ColorMapBreakpoint::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
  }
}

void ColorMapBreakpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorMapBreakpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorMapBreakpoint_descriptor_;
}

const ColorMapBreakpoint& ColorMapBreakpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ColorMap_2eproto();
  return *default_instance_;
}

ColorMapBreakpoint* ColorMapBreakpoint::default_instance_ = NULL;

ColorMapBreakpoint* ColorMapBreakpoint::New(::google::protobuf::Arena* arena) const {
  ColorMapBreakpoint* n = new ColorMapBreakpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorMapBreakpoint::Clear() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  scalar_ = 0;
}

bool ColorMapBreakpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElVis.Serialization.ColorMapBreakpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ElVis.Serialization.Color color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_scalar;
        break;
      }

      // optional double scalar = 2;
      case 2: {
        if (tag == 17) {
         parse_scalar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scalar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElVis.Serialization.ColorMapBreakpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElVis.Serialization.ColorMapBreakpoint)
  return false;
#undef DO_
}

void ColorMapBreakpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElVis.Serialization.ColorMapBreakpoint)
  // optional .ElVis.Serialization.Color color = 1;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // optional double scalar = 2;
  if (this->scalar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->scalar(), output);
  }

  // @@protoc_insertion_point(serialize_end:ElVis.Serialization.ColorMapBreakpoint)
}

::google::protobuf::uint8* ColorMapBreakpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElVis.Serialization.ColorMapBreakpoint)
  // optional .ElVis.Serialization.Color color = 1;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->color_, target);
  }

  // optional double scalar = 2;
  if (this->scalar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->scalar(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ElVis.Serialization.ColorMapBreakpoint)
  return target;
}

int ColorMapBreakpoint::ByteSize() const {
  int total_size = 0;

  // optional .ElVis.Serialization.Color color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional double scalar = 2;
  if (this->scalar() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorMapBreakpoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ColorMapBreakpoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColorMapBreakpoint>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorMapBreakpoint::MergeFrom(const ColorMapBreakpoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_color()) {
    mutable_color()->::ElVis::Serialization::Color::MergeFrom(from.color());
  }
  if (from.scalar() != 0) {
    set_scalar(from.scalar());
  }
}

void ColorMapBreakpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMapBreakpoint::CopyFrom(const ColorMapBreakpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMapBreakpoint::IsInitialized() const {

  return true;
}

void ColorMapBreakpoint::Swap(ColorMapBreakpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorMapBreakpoint::InternalSwap(ColorMapBreakpoint* other) {
  std::swap(color_, other->color_);
  std::swap(scalar_, other->scalar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColorMapBreakpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorMapBreakpoint_descriptor_;
  metadata.reflection = ColorMapBreakpoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorMapBreakpoint

// optional .ElVis.Serialization.Color color = 1;
bool ColorMapBreakpoint::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void ColorMapBreakpoint::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::ElVis::Serialization::Color& ColorMapBreakpoint::color() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMapBreakpoint.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::ElVis::Serialization::Color* ColorMapBreakpoint::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::ElVis::Serialization::Color;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.ColorMapBreakpoint.color)
  return color_;
}
::ElVis::Serialization::Color* ColorMapBreakpoint::release_color() {
  
  ::ElVis::Serialization::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void ColorMapBreakpoint::set_allocated_color(::ElVis::Serialization::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.ColorMapBreakpoint.color)
}

// optional double scalar = 2;
void ColorMapBreakpoint::clear_scalar() {
  scalar_ = 0;
}
 double ColorMapBreakpoint::scalar() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMapBreakpoint.scalar)
  return scalar_;
}
 void ColorMapBreakpoint::set_scalar(double value) {
  
  scalar_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMapBreakpoint.scalar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ColorMap::kMinFieldNumber;
const int ColorMap::kMaxFieldNumber;
const int ColorMap::kBreakpointsFieldNumber;
#endif  // !_MSC_VER

ColorMap::ColorMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElVis.Serialization.ColorMap)
}

void ColorMap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ColorMap::ColorMap(const ColorMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElVis.Serialization.ColorMap)
}

void ColorMap::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
}

ColorMap::~ColorMap() {
  // @@protoc_insertion_point(destructor:ElVis.Serialization.ColorMap)
  SharedDtor();
}

void ColorMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorMap_descriptor_;
}

const ColorMap& ColorMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ColorMap_2eproto();
  return *default_instance_;
}

ColorMap* ColorMap::default_instance_ = NULL;

ColorMap* ColorMap::New(::google::protobuf::Arena* arena) const {
  ColorMap* n = new ColorMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorMap::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ColorMap*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_, max_);

#undef ZR_HELPER_
#undef ZR_

  breakpoints_.Clear();
}

bool ColorMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElVis.Serialization.ColorMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max;
        break;
      }

      // optional float max = 2;
      case 2: {
        if (tag == 21) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_breakpoints;
        break;
      }

      // repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
      case 3: {
        if (tag == 26) {
         parse_breakpoints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_breakpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_breakpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_breakpoints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElVis.Serialization.ColorMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElVis.Serialization.ColorMap)
  return false;
#undef DO_
}

void ColorMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElVis.Serialization.ColorMap)
  // optional float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // optional float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
  for (unsigned int i = 0, n = this->breakpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->breakpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ElVis.Serialization.ColorMap)
}

::google::protobuf::uint8* ColorMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElVis.Serialization.ColorMap)
  // optional float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // optional float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
  for (unsigned int i = 0, n = this->breakpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->breakpoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ElVis.Serialization.ColorMap)
  return target;
}

int ColorMap::ByteSize() const {
  int total_size = 0;

  // optional float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // optional float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  // repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
  total_size += 1 * this->breakpoints_size();
  for (int i = 0; i < this->breakpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->breakpoints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorMap::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ColorMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColorMap>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorMap::MergeFrom(const ColorMap& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  breakpoints_.MergeFrom(from.breakpoints_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void ColorMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMap::CopyFrom(const ColorMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMap::IsInitialized() const {

  return true;
}

void ColorMap::Swap(ColorMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorMap::InternalSwap(ColorMap* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  breakpoints_.UnsafeArenaSwap(&other->breakpoints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColorMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorMap_descriptor_;
  metadata.reflection = ColorMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorMap

// optional float min = 1;
void ColorMap::clear_min() {
  min_ = 0;
}
 float ColorMap::min() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMap.min)
  return min_;
}
 void ColorMap::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMap.min)
}

// optional float max = 2;
void ColorMap::clear_max() {
  max_ = 0;
}
 float ColorMap::max() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMap.max)
  return max_;
}
 void ColorMap::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMap.max)
}

// repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
int ColorMap::breakpoints_size() const {
  return breakpoints_.size();
}
void ColorMap::clear_breakpoints() {
  breakpoints_.Clear();
}
const ::ElVis::Serialization::ColorMapBreakpoint& ColorMap::breakpoints(int index) const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_.Get(index);
}
::ElVis::Serialization::ColorMapBreakpoint* ColorMap::mutable_breakpoints(int index) {
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_.Mutable(index);
}
::ElVis::Serialization::ColorMapBreakpoint* ColorMap::add_breakpoints() {
  // @@protoc_insertion_point(field_add:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint >*
ColorMap::mutable_breakpoints() {
  // @@protoc_insertion_point(field_mutable_list:ElVis.Serialization.ColorMap.breakpoints)
  return &breakpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint >&
ColorMap::breakpoints() const {
  // @@protoc_insertion_point(field_list:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)
