// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ColorMap.proto

#ifndef PROTOBUF_ColorMap_2eproto__INCLUDED
#define PROTOBUF_ColorMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Color.pb.h"
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ColorMap_2eproto();
void protobuf_AssignDesc_ColorMap_2eproto();
void protobuf_ShutdownFile_ColorMap_2eproto();

class ColorMap;
class ColorMapBreakpoint;

// ===================================================================

class ColorMapBreakpoint : public ::google::protobuf::Message {
 public:
  ColorMapBreakpoint();
  virtual ~ColorMapBreakpoint();

  ColorMapBreakpoint(const ColorMapBreakpoint& from);

  inline ColorMapBreakpoint& operator=(const ColorMapBreakpoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorMapBreakpoint& default_instance();

  void Swap(ColorMapBreakpoint* other);

  // implements Message ----------------------------------------------

  inline ColorMapBreakpoint* New() const { return New(NULL); }

  ColorMapBreakpoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorMapBreakpoint& from);
  void MergeFrom(const ColorMapBreakpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorMapBreakpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ElVis.Serialization.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  const ::ElVis::Serialization::Color& color() const;
  ::ElVis::Serialization::Color* mutable_color();
  ::ElVis::Serialization::Color* release_color();
  void set_allocated_color(::ElVis::Serialization::Color* color);

  // optional double scalar = 2;
  void clear_scalar();
  static const int kScalarFieldNumber = 2;
  double scalar() const;
  void set_scalar(double value);

  // @@protoc_insertion_point(class_scope:ElVis.Serialization.ColorMapBreakpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ElVis::Serialization::Color* color_;
  double scalar_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ColorMap_2eproto();
  friend void protobuf_AssignDesc_ColorMap_2eproto();
  friend void protobuf_ShutdownFile_ColorMap_2eproto();

  void InitAsDefaultInstance();
  static ColorMapBreakpoint* default_instance_;
};
// -------------------------------------------------------------------

class ColorMap : public ::google::protobuf::Message {
 public:
  ColorMap();
  virtual ~ColorMap();

  ColorMap(const ColorMap& from);

  inline ColorMap& operator=(const ColorMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorMap& default_instance();

  void Swap(ColorMap* other);

  // implements Message ----------------------------------------------

  inline ColorMap* New() const { return New(NULL); }

  ColorMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorMap& from);
  void MergeFrom(const ColorMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // optional float max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
  int breakpoints_size() const;
  void clear_breakpoints();
  static const int kBreakpointsFieldNumber = 3;
  const ::ElVis::Serialization::ColorMapBreakpoint& breakpoints(int index) const;
  ::ElVis::Serialization::ColorMapBreakpoint* mutable_breakpoints(int index);
  ::ElVis::Serialization::ColorMapBreakpoint* add_breakpoints();
  ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint >*
      mutable_breakpoints();
  const ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint >&
      breakpoints() const;

  // @@protoc_insertion_point(class_scope:ElVis.Serialization.ColorMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float min_;
  float max_;
  ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint > breakpoints_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ColorMap_2eproto();
  friend void protobuf_AssignDesc_ColorMap_2eproto();
  friend void protobuf_ShutdownFile_ColorMap_2eproto();

  void InitAsDefaultInstance();
  static ColorMap* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorMapBreakpoint

// optional .ElVis.Serialization.Color color = 1;
inline bool ColorMapBreakpoint::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void ColorMapBreakpoint::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::ElVis::Serialization::Color& ColorMapBreakpoint::color() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMapBreakpoint.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ElVis::Serialization::Color* ColorMapBreakpoint::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::ElVis::Serialization::Color;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.ColorMapBreakpoint.color)
  return color_;
}
inline ::ElVis::Serialization::Color* ColorMapBreakpoint::release_color() {
  
  ::ElVis::Serialization::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void ColorMapBreakpoint::set_allocated_color(::ElVis::Serialization::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.ColorMapBreakpoint.color)
}

// optional double scalar = 2;
inline void ColorMapBreakpoint::clear_scalar() {
  scalar_ = 0;
}
inline double ColorMapBreakpoint::scalar() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMapBreakpoint.scalar)
  return scalar_;
}
inline void ColorMapBreakpoint::set_scalar(double value) {
  
  scalar_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMapBreakpoint.scalar)
}

// -------------------------------------------------------------------

// ColorMap

// optional float min = 1;
inline void ColorMap::clear_min() {
  min_ = 0;
}
inline float ColorMap::min() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMap.min)
  return min_;
}
inline void ColorMap::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMap.min)
}

// optional float max = 2;
inline void ColorMap::clear_max() {
  max_ = 0;
}
inline float ColorMap::max() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMap.max)
  return max_;
}
inline void ColorMap::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMap.max)
}

// repeated .ElVis.Serialization.ColorMapBreakpoint breakpoints = 3;
inline int ColorMap::breakpoints_size() const {
  return breakpoints_.size();
}
inline void ColorMap::clear_breakpoints() {
  breakpoints_.Clear();
}
inline const ::ElVis::Serialization::ColorMapBreakpoint& ColorMap::breakpoints(int index) const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_.Get(index);
}
inline ::ElVis::Serialization::ColorMapBreakpoint* ColorMap::mutable_breakpoints(int index) {
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_.Mutable(index);
}
inline ::ElVis::Serialization::ColorMapBreakpoint* ColorMap::add_breakpoints() {
  // @@protoc_insertion_point(field_add:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint >*
ColorMap::mutable_breakpoints() {
  // @@protoc_insertion_point(field_mutable_list:ElVis.Serialization.ColorMap.breakpoints)
  return &breakpoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::ColorMapBreakpoint >&
ColorMap::breakpoints() const {
  // @@protoc_insertion_point(field_list:ElVis.Serialization.ColorMap.breakpoints)
  return breakpoints_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ColorMap_2eproto__INCLUDED
