// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RenderModule.proto

#ifndef PROTOBUF_RenderModule_2eproto__INCLUDED
#define PROTOBUF_RenderModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RenderModule_2eproto();
void protobuf_AssignDesc_RenderModule_2eproto();
void protobuf_ShutdownFile_RenderModule_2eproto();

class RenderModule;

// ===================================================================

class RenderModule : public ::google::protobuf::Message {
 public:
  RenderModule();
  virtual ~RenderModule();

  RenderModule(const RenderModule& from);

  inline RenderModule& operator=(const RenderModule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenderModule& default_instance();

  void Swap(RenderModule* other);

  // implements Message ----------------------------------------------

  inline RenderModule* New() const { return New(NULL); }

  RenderModule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenderModule& from);
  void MergeFrom(const RenderModule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenderModule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // optional .google.protobuf.Any concrete_module = 2;
  bool has_concrete_module() const;
  void clear_concrete_module();
  static const int kConcreteModuleFieldNumber = 2;
  const ::google::protobuf::Any& concrete_module() const;
  ::google::protobuf::Any* mutable_concrete_module();
  ::google::protobuf::Any* release_concrete_module();
  void set_allocated_concrete_module(::google::protobuf::Any* concrete_module);

  // @@protoc_insertion_point(class_scope:ElVis.Serialization.RenderModule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* concrete_module_;
  bool enabled_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RenderModule_2eproto();
  friend void protobuf_AssignDesc_RenderModule_2eproto();
  friend void protobuf_ShutdownFile_RenderModule_2eproto();

  void InitAsDefaultInstance();
  static RenderModule* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RenderModule

// optional bool enabled = 1;
inline void RenderModule::clear_enabled() {
  enabled_ = false;
}
inline bool RenderModule::enabled() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.RenderModule.enabled)
  return enabled_;
}
inline void RenderModule::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.RenderModule.enabled)
}

// optional .google.protobuf.Any concrete_module = 2;
inline bool RenderModule::has_concrete_module() const {
  return !_is_default_instance_ && concrete_module_ != NULL;
}
inline void RenderModule::clear_concrete_module() {
  if (GetArenaNoVirtual() == NULL && concrete_module_ != NULL) delete concrete_module_;
  concrete_module_ = NULL;
}
inline const ::google::protobuf::Any& RenderModule::concrete_module() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.RenderModule.concrete_module)
  return concrete_module_ != NULL ? *concrete_module_ : *default_instance_->concrete_module_;
}
inline ::google::protobuf::Any* RenderModule::mutable_concrete_module() {
  
  if (concrete_module_ == NULL) {
    concrete_module_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.RenderModule.concrete_module)
  return concrete_module_;
}
inline ::google::protobuf::Any* RenderModule::release_concrete_module() {
  
  ::google::protobuf::Any* temp = concrete_module_;
  concrete_module_ = NULL;
  return temp;
}
inline void RenderModule::set_allocated_concrete_module(::google::protobuf::Any* concrete_module) {
  delete concrete_module_;
  concrete_module_ = concrete_module;
  if (concrete_module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.RenderModule.concrete_module)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RenderModule_2eproto__INCLUDED
