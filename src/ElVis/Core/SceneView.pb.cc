// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneView.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneView.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

namespace {

const ::google::protobuf::Descriptor* SceneView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneView_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneView_2eproto() {
  protobuf_AddDesc_SceneView_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneView.proto");
  GOOGLE_CHECK(file != NULL);
  SceneView_descriptor_ = file->message_type(0);
  static const int SceneView_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneView, render_modules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneView, stack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneView, view_settings_),
  };
  SceneView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SceneView_descriptor_,
      SceneView::default_instance_,
      SceneView_offsets_,
      -1,
      -1,
      -1,
      sizeof(SceneView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneView, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneView, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneView_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SceneView_descriptor_, &SceneView::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneView_2eproto() {
  delete SceneView::default_instance_;
  delete SceneView_reflection_;
}

void protobuf_AddDesc_SceneView_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ElVis::Serialization::protobuf_AddDesc_RenderModule_2eproto();
  ::ElVis::Serialization::protobuf_AddDesc_Camera_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SceneView.proto\022\023ElVis.Serialization\032\022"
    "RenderModule.proto\032\014Camera.proto\"\216\001\n\tSce"
    "neView\0229\n\016render_modules\030\001 \003(\0132!.ElVis.S"
    "erialization.RenderModule\022\022\n\nstack_size\030"
    "\002 \001(\005\0222\n\rview_settings\030\003 \001(\0132\033.ElVis.Ser"
    "ialization.Camerab\006proto3", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneView.proto", &protobuf_RegisterTypes);
  SceneView::default_instance_ = new SceneView();
  SceneView::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneView_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneView_2eproto {
  StaticDescriptorInitializer_SceneView_2eproto() {
    protobuf_AddDesc_SceneView_2eproto();
  }
} static_descriptor_initializer_SceneView_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SceneView::kRenderModulesFieldNumber;
const int SceneView::kStackSizeFieldNumber;
const int SceneView::kViewSettingsFieldNumber;
#endif  // !_MSC_VER

SceneView::SceneView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElVis.Serialization.SceneView)
}

void SceneView::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  view_settings_ = const_cast< ::ElVis::Serialization::Camera*>(&::ElVis::Serialization::Camera::default_instance());
}

SceneView::SceneView(const SceneView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElVis.Serialization.SceneView)
}

void SceneView::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  stack_size_ = 0;
  view_settings_ = NULL;
}

SceneView::~SceneView() {
  // @@protoc_insertion_point(destructor:ElVis.Serialization.SceneView)
  SharedDtor();
}

void SceneView::SharedDtor() {
  if (this != default_instance_) {
    delete view_settings_;
  }
}

void SceneView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneView_descriptor_;
}

const SceneView& SceneView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneView_2eproto();
  return *default_instance_;
}

SceneView* SceneView::default_instance_ = NULL;

SceneView* SceneView::New(::google::protobuf::Arena* arena) const {
  SceneView* n = new SceneView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneView::Clear() {
  stack_size_ = 0;
  if (GetArenaNoVirtual() == NULL && view_settings_ != NULL) delete view_settings_;
  view_settings_ = NULL;
  render_modules_.Clear();
}

bool SceneView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElVis.Serialization.SceneView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ElVis.Serialization.RenderModule render_modules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_render_modules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_render_modules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_render_modules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_stack_size;
        break;
      }

      // optional int32 stack_size = 2;
      case 2: {
        if (tag == 16) {
         parse_stack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_view_settings;
        break;
      }

      // optional .ElVis.Serialization.Camera view_settings = 3;
      case 3: {
        if (tag == 26) {
         parse_view_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElVis.Serialization.SceneView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElVis.Serialization.SceneView)
  return false;
#undef DO_
}

void SceneView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElVis.Serialization.SceneView)
  // repeated .ElVis.Serialization.RenderModule render_modules = 1;
  for (unsigned int i = 0, n = this->render_modules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->render_modules(i), output);
  }

  // optional int32 stack_size = 2;
  if (this->stack_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stack_size(), output);
  }

  // optional .ElVis.Serialization.Camera view_settings = 3;
  if (this->has_view_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->view_settings_, output);
  }

  // @@protoc_insertion_point(serialize_end:ElVis.Serialization.SceneView)
}

::google::protobuf::uint8* SceneView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElVis.Serialization.SceneView)
  // repeated .ElVis.Serialization.RenderModule render_modules = 1;
  for (unsigned int i = 0, n = this->render_modules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->render_modules(i), target);
  }

  // optional int32 stack_size = 2;
  if (this->stack_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stack_size(), target);
  }

  // optional .ElVis.Serialization.Camera view_settings = 3;
  if (this->has_view_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->view_settings_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ElVis.Serialization.SceneView)
  return target;
}

int SceneView::ByteSize() const {
  int total_size = 0;

  // optional int32 stack_size = 2;
  if (this->stack_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stack_size());
  }

  // optional .ElVis.Serialization.Camera view_settings = 3;
  if (this->has_view_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_settings_);
  }

  // repeated .ElVis.Serialization.RenderModule render_modules = 1;
  total_size += 1 * this->render_modules_size();
  for (int i = 0; i < this->render_modules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->render_modules(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneView::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SceneView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneView>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneView::MergeFrom(const SceneView& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  render_modules_.MergeFrom(from.render_modules_);
  if (from.stack_size() != 0) {
    set_stack_size(from.stack_size());
  }
  if (from.has_view_settings()) {
    mutable_view_settings()->::ElVis::Serialization::Camera::MergeFrom(from.view_settings());
  }
}

void SceneView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneView::CopyFrom(const SceneView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneView::IsInitialized() const {

  return true;
}

void SceneView::Swap(SceneView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneView::InternalSwap(SceneView* other) {
  render_modules_.UnsafeArenaSwap(&other->render_modules_);
  std::swap(stack_size_, other->stack_size_);
  std::swap(view_settings_, other->view_settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneView_descriptor_;
  metadata.reflection = SceneView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneView

// repeated .ElVis.Serialization.RenderModule render_modules = 1;
int SceneView::render_modules_size() const {
  return render_modules_.size();
}
void SceneView::clear_render_modules() {
  render_modules_.Clear();
}
const ::ElVis::Serialization::RenderModule& SceneView::render_modules(int index) const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.SceneView.render_modules)
  return render_modules_.Get(index);
}
::ElVis::Serialization::RenderModule* SceneView::mutable_render_modules(int index) {
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.SceneView.render_modules)
  return render_modules_.Mutable(index);
}
::ElVis::Serialization::RenderModule* SceneView::add_render_modules() {
  // @@protoc_insertion_point(field_add:ElVis.Serialization.SceneView.render_modules)
  return render_modules_.Add();
}
::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule >*
SceneView::mutable_render_modules() {
  // @@protoc_insertion_point(field_mutable_list:ElVis.Serialization.SceneView.render_modules)
  return &render_modules_;
}
const ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule >&
SceneView::render_modules() const {
  // @@protoc_insertion_point(field_list:ElVis.Serialization.SceneView.render_modules)
  return render_modules_;
}

// optional int32 stack_size = 2;
void SceneView::clear_stack_size() {
  stack_size_ = 0;
}
 ::google::protobuf::int32 SceneView::stack_size() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.SceneView.stack_size)
  return stack_size_;
}
 void SceneView::set_stack_size(::google::protobuf::int32 value) {
  
  stack_size_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.SceneView.stack_size)
}

// optional .ElVis.Serialization.Camera view_settings = 3;
bool SceneView::has_view_settings() const {
  return !_is_default_instance_ && view_settings_ != NULL;
}
void SceneView::clear_view_settings() {
  if (GetArenaNoVirtual() == NULL && view_settings_ != NULL) delete view_settings_;
  view_settings_ = NULL;
}
const ::ElVis::Serialization::Camera& SceneView::view_settings() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.SceneView.view_settings)
  return view_settings_ != NULL ? *view_settings_ : *default_instance_->view_settings_;
}
::ElVis::Serialization::Camera* SceneView::mutable_view_settings() {
  
  if (view_settings_ == NULL) {
    view_settings_ = new ::ElVis::Serialization::Camera;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.SceneView.view_settings)
  return view_settings_;
}
::ElVis::Serialization::Camera* SceneView::release_view_settings() {
  
  ::ElVis::Serialization::Camera* temp = view_settings_;
  view_settings_ = NULL;
  return temp;
}
void SceneView::set_allocated_view_settings(::ElVis::Serialization::Camera* view_settings) {
  delete view_settings_;
  view_settings_ = view_settings;
  if (view_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.SceneView.view_settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)
