// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneView.proto

#ifndef PROTOBUF_SceneView_2eproto__INCLUDED
#define PROTOBUF_SceneView_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RenderModule.pb.h"
#include "Camera.pb.h"
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SceneView_2eproto();
void protobuf_AssignDesc_SceneView_2eproto();
void protobuf_ShutdownFile_SceneView_2eproto();

class SceneView;

// ===================================================================

class SceneView : public ::google::protobuf::Message {
 public:
  SceneView();
  virtual ~SceneView();

  SceneView(const SceneView& from);

  inline SceneView& operator=(const SceneView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneView& default_instance();

  void Swap(SceneView* other);

  // implements Message ----------------------------------------------

  inline SceneView* New() const { return New(NULL); }

  SceneView* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneView& from);
  void MergeFrom(const SceneView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SceneView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ElVis.Serialization.RenderModule render_modules = 1;
  int render_modules_size() const;
  void clear_render_modules();
  static const int kRenderModulesFieldNumber = 1;
  const ::ElVis::Serialization::RenderModule& render_modules(int index) const;
  ::ElVis::Serialization::RenderModule* mutable_render_modules(int index);
  ::ElVis::Serialization::RenderModule* add_render_modules();
  ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule >*
      mutable_render_modules();
  const ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule >&
      render_modules() const;

  // optional int32 stack_size = 2;
  void clear_stack_size();
  static const int kStackSizeFieldNumber = 2;
  ::google::protobuf::int32 stack_size() const;
  void set_stack_size(::google::protobuf::int32 value);

  // optional .ElVis.Serialization.Camera view_settings = 3;
  bool has_view_settings() const;
  void clear_view_settings();
  static const int kViewSettingsFieldNumber = 3;
  const ::ElVis::Serialization::Camera& view_settings() const;
  ::ElVis::Serialization::Camera* mutable_view_settings();
  ::ElVis::Serialization::Camera* release_view_settings();
  void set_allocated_view_settings(::ElVis::Serialization::Camera* view_settings);

  // @@protoc_insertion_point(class_scope:ElVis.Serialization.SceneView)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule > render_modules_;
  ::ElVis::Serialization::Camera* view_settings_;
  ::google::protobuf::int32 stack_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SceneView_2eproto();
  friend void protobuf_AssignDesc_SceneView_2eproto();
  friend void protobuf_ShutdownFile_SceneView_2eproto();

  void InitAsDefaultInstance();
  static SceneView* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneView

// repeated .ElVis.Serialization.RenderModule render_modules = 1;
inline int SceneView::render_modules_size() const {
  return render_modules_.size();
}
inline void SceneView::clear_render_modules() {
  render_modules_.Clear();
}
inline const ::ElVis::Serialization::RenderModule& SceneView::render_modules(int index) const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.SceneView.render_modules)
  return render_modules_.Get(index);
}
inline ::ElVis::Serialization::RenderModule* SceneView::mutable_render_modules(int index) {
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.SceneView.render_modules)
  return render_modules_.Mutable(index);
}
inline ::ElVis::Serialization::RenderModule* SceneView::add_render_modules() {
  // @@protoc_insertion_point(field_add:ElVis.Serialization.SceneView.render_modules)
  return render_modules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule >*
SceneView::mutable_render_modules() {
  // @@protoc_insertion_point(field_mutable_list:ElVis.Serialization.SceneView.render_modules)
  return &render_modules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ElVis::Serialization::RenderModule >&
SceneView::render_modules() const {
  // @@protoc_insertion_point(field_list:ElVis.Serialization.SceneView.render_modules)
  return render_modules_;
}

// optional int32 stack_size = 2;
inline void SceneView::clear_stack_size() {
  stack_size_ = 0;
}
inline ::google::protobuf::int32 SceneView::stack_size() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.SceneView.stack_size)
  return stack_size_;
}
inline void SceneView::set_stack_size(::google::protobuf::int32 value) {
  
  stack_size_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.SceneView.stack_size)
}

// optional .ElVis.Serialization.Camera view_settings = 3;
inline bool SceneView::has_view_settings() const {
  return !_is_default_instance_ && view_settings_ != NULL;
}
inline void SceneView::clear_view_settings() {
  if (GetArenaNoVirtual() == NULL && view_settings_ != NULL) delete view_settings_;
  view_settings_ = NULL;
}
inline const ::ElVis::Serialization::Camera& SceneView::view_settings() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.SceneView.view_settings)
  return view_settings_ != NULL ? *view_settings_ : *default_instance_->view_settings_;
}
inline ::ElVis::Serialization::Camera* SceneView::mutable_view_settings() {
  
  if (view_settings_ == NULL) {
    view_settings_ = new ::ElVis::Serialization::Camera;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.SceneView.view_settings)
  return view_settings_;
}
inline ::ElVis::Serialization::Camera* SceneView::release_view_settings() {
  
  ::ElVis::Serialization::Camera* temp = view_settings_;
  view_settings_ = NULL;
  return temp;
}
inline void SceneView::set_allocated_view_settings(::ElVis::Serialization::Camera* view_settings) {
  delete view_settings_;
  view_settings_ = view_settings;
  if (view_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.SceneView.view_settings)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneView_2eproto__INCLUDED
