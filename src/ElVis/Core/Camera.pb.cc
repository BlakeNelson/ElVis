// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

namespace {

const ::google::protobuf::Descriptor* Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camera_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Camera_2eproto() {
  protobuf_AddDesc_Camera_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Camera.proto");
  GOOGLE_CHECK(file != NULL);
  Camera_descriptor_ = file->message_type(0);
  static const int Camera_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, lookat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, field_of_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, aspect_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, near_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, far_),
  };
  Camera_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Camera_descriptor_,
      Camera::default_instance_,
      Camera_offsets_,
      -1,
      -1,
      -1,
      sizeof(Camera),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Camera_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Camera_descriptor_, &Camera::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Camera_2eproto() {
  delete Camera::default_instance_;
  delete Camera_reflection_;
}

void protobuf_AddDesc_Camera_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ElVis::Serialization::protobuf_AddDesc_Point_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Camera.proto\022\023ElVis.Serialization\032\013Poi"
    "nt.proto\"\302\002\n\006Camera\022\'\n\003eye\030\001 \001(\0132\032.ElVis"
    ".Serialization.Point\022*\n\006lookAt\030\002 \001(\0132\032.E"
    "lVis.Serialization.Point\022&\n\002up\030\003 \001(\0132\032.E"
    "lVis.Serialization.Point\022%\n\001u\030\004 \001(\0132\032.El"
    "Vis.Serialization.Point\022%\n\001v\030\005 \001(\0132\032.ElV"
    "is.Serialization.Point\022%\n\001w\030\006 \001(\0132\032.ElVi"
    "s.Serialization.Point\022\025\n\rfield_of_view\030\007"
    " \001(\001\022\024\n\014aspect_ratio\030\010 \001(\001\022\014\n\004near\030\t \001(\002"
    "\022\013\n\003far\030\n \001(\002b\006proto3", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Camera.proto", &protobuf_RegisterTypes);
  Camera::default_instance_ = new Camera();
  Camera::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Camera_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Camera_2eproto {
  StaticDescriptorInitializer_Camera_2eproto() {
    protobuf_AddDesc_Camera_2eproto();
  }
} static_descriptor_initializer_Camera_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Camera::kEyeFieldNumber;
const int Camera::kLookAtFieldNumber;
const int Camera::kUpFieldNumber;
const int Camera::kUFieldNumber;
const int Camera::kVFieldNumber;
const int Camera::kWFieldNumber;
const int Camera::kFieldOfViewFieldNumber;
const int Camera::kAspectRatioFieldNumber;
const int Camera::kNearFieldNumber;
const int Camera::kFarFieldNumber;
#endif  // !_MSC_VER

Camera::Camera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElVis.Serialization.Camera)
}

void Camera::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  eye_ = const_cast< ::ElVis::Serialization::Point*>(&::ElVis::Serialization::Point::default_instance());
  lookat_ = const_cast< ::ElVis::Serialization::Point*>(&::ElVis::Serialization::Point::default_instance());
  up_ = const_cast< ::ElVis::Serialization::Point*>(&::ElVis::Serialization::Point::default_instance());
  u_ = const_cast< ::ElVis::Serialization::Point*>(&::ElVis::Serialization::Point::default_instance());
  v_ = const_cast< ::ElVis::Serialization::Point*>(&::ElVis::Serialization::Point::default_instance());
  w_ = const_cast< ::ElVis::Serialization::Point*>(&::ElVis::Serialization::Point::default_instance());
}

Camera::Camera(const Camera& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElVis.Serialization.Camera)
}

void Camera::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eye_ = NULL;
  lookat_ = NULL;
  up_ = NULL;
  u_ = NULL;
  v_ = NULL;
  w_ = NULL;
  field_of_view_ = 0;
  aspect_ratio_ = 0;
  near_ = 0;
  far_ = 0;
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:ElVis.Serialization.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  if (this != default_instance_) {
    delete eye_;
    delete lookat_;
    delete up_;
    delete u_;
    delete v_;
    delete w_;
  }
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_descriptor_;
}

const Camera& Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Camera_2eproto();
  return *default_instance_;
}

Camera* Camera::default_instance_ = NULL;

Camera* Camera::New(::google::protobuf::Arena* arena) const {
  Camera* n = new Camera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Camera::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Camera*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(field_of_view_, aspect_ratio_);
  if (GetArenaNoVirtual() == NULL && eye_ != NULL) delete eye_;
  eye_ = NULL;
  if (GetArenaNoVirtual() == NULL && lookat_ != NULL) delete lookat_;
  lookat_ = NULL;
  if (GetArenaNoVirtual() == NULL && up_ != NULL) delete up_;
  up_ = NULL;
  if (GetArenaNoVirtual() == NULL && u_ != NULL) delete u_;
  u_ = NULL;
  if (GetArenaNoVirtual() == NULL && v_ != NULL) delete v_;
  v_ = NULL;
  if (GetArenaNoVirtual() == NULL && w_ != NULL) delete w_;
  w_ = NULL;
  ZR_(near_, far_);

#undef ZR_HELPER_
#undef ZR_

}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElVis.Serialization.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ElVis.Serialization.Point eye = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eye()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lookAt;
        break;
      }

      // optional .ElVis.Serialization.Point lookAt = 2;
      case 2: {
        if (tag == 18) {
         parse_lookAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lookat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_up;
        break;
      }

      // optional .ElVis.Serialization.Point up = 3;
      case 3: {
        if (tag == 26) {
         parse_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_u;
        break;
      }

      // optional .ElVis.Serialization.Point u = 4;
      case 4: {
        if (tag == 34) {
         parse_u:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_u()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_v;
        break;
      }

      // optional .ElVis.Serialization.Point v = 5;
      case 5: {
        if (tag == 42) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_w;
        break;
      }

      // optional .ElVis.Serialization.Point w = 6;
      case 6: {
        if (tag == 50) {
         parse_w:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_w()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_field_of_view;
        break;
      }

      // optional double field_of_view = 7;
      case 7: {
        if (tag == 57) {
         parse_field_of_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_aspect_ratio;
        break;
      }

      // optional double aspect_ratio = 8;
      case 8: {
        if (tag == 65) {
         parse_aspect_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aspect_ratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_near;
        break;
      }

      // optional float near = 9;
      case 9: {
        if (tag == 77) {
         parse_near:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &near_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_far;
        break;
      }

      // optional float far = 10;
      case 10: {
        if (tag == 85) {
         parse_far:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &far_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElVis.Serialization.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElVis.Serialization.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElVis.Serialization.Camera)
  // optional .ElVis.Serialization.Point eye = 1;
  if (this->has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->eye_, output);
  }

  // optional .ElVis.Serialization.Point lookAt = 2;
  if (this->has_lookat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lookat_, output);
  }

  // optional .ElVis.Serialization.Point up = 3;
  if (this->has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->up_, output);
  }

  // optional .ElVis.Serialization.Point u = 4;
  if (this->has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->u_, output);
  }

  // optional .ElVis.Serialization.Point v = 5;
  if (this->has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->v_, output);
  }

  // optional .ElVis.Serialization.Point w = 6;
  if (this->has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->w_, output);
  }

  // optional double field_of_view = 7;
  if (this->field_of_view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->field_of_view(), output);
  }

  // optional double aspect_ratio = 8;
  if (this->aspect_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->aspect_ratio(), output);
  }

  // optional float near = 9;
  if (this->near() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->near(), output);
  }

  // optional float far = 10;
  if (this->far() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->far(), output);
  }

  // @@protoc_insertion_point(serialize_end:ElVis.Serialization.Camera)
}

::google::protobuf::uint8* Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElVis.Serialization.Camera)
  // optional .ElVis.Serialization.Point eye = 1;
  if (this->has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->eye_, target);
  }

  // optional .ElVis.Serialization.Point lookAt = 2;
  if (this->has_lookat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->lookat_, target);
  }

  // optional .ElVis.Serialization.Point up = 3;
  if (this->has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->up_, target);
  }

  // optional .ElVis.Serialization.Point u = 4;
  if (this->has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->u_, target);
  }

  // optional .ElVis.Serialization.Point v = 5;
  if (this->has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->v_, target);
  }

  // optional .ElVis.Serialization.Point w = 6;
  if (this->has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->w_, target);
  }

  // optional double field_of_view = 7;
  if (this->field_of_view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->field_of_view(), target);
  }

  // optional double aspect_ratio = 8;
  if (this->aspect_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->aspect_ratio(), target);
  }

  // optional float near = 9;
  if (this->near() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->near(), target);
  }

  // optional float far = 10;
  if (this->far() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->far(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ElVis.Serialization.Camera)
  return target;
}

int Camera::ByteSize() const {
  int total_size = 0;

  // optional .ElVis.Serialization.Point eye = 1;
  if (this->has_eye()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eye_);
  }

  // optional .ElVis.Serialization.Point lookAt = 2;
  if (this->has_lookat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lookat_);
  }

  // optional .ElVis.Serialization.Point up = 3;
  if (this->has_up()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->up_);
  }

  // optional .ElVis.Serialization.Point u = 4;
  if (this->has_u()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->u_);
  }

  // optional .ElVis.Serialization.Point v = 5;
  if (this->has_v()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->v_);
  }

  // optional .ElVis.Serialization.Point w = 6;
  if (this->has_w()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_);
  }

  // optional double field_of_view = 7;
  if (this->field_of_view() != 0) {
    total_size += 1 + 8;
  }

  // optional double aspect_ratio = 8;
  if (this->aspect_ratio() != 0) {
    total_size += 1 + 8;
  }

  // optional float near = 9;
  if (this->near() != 0) {
    total_size += 1 + 4;
  }

  // optional float far = 10;
  if (this->far() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Camera* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Camera>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_eye()) {
    mutable_eye()->::ElVis::Serialization::Point::MergeFrom(from.eye());
  }
  if (from.has_lookat()) {
    mutable_lookat()->::ElVis::Serialization::Point::MergeFrom(from.lookat());
  }
  if (from.has_up()) {
    mutable_up()->::ElVis::Serialization::Point::MergeFrom(from.up());
  }
  if (from.has_u()) {
    mutable_u()->::ElVis::Serialization::Point::MergeFrom(from.u());
  }
  if (from.has_v()) {
    mutable_v()->::ElVis::Serialization::Point::MergeFrom(from.v());
  }
  if (from.has_w()) {
    mutable_w()->::ElVis::Serialization::Point::MergeFrom(from.w());
  }
  if (from.field_of_view() != 0) {
    set_field_of_view(from.field_of_view());
  }
  if (from.aspect_ratio() != 0) {
    set_aspect_ratio(from.aspect_ratio());
  }
  if (from.near() != 0) {
    set_near(from.near());
  }
  if (from.far() != 0) {
    set_far(from.far());
  }
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {

  return true;
}

void Camera::Swap(Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera::InternalSwap(Camera* other) {
  std::swap(eye_, other->eye_);
  std::swap(lookat_, other->lookat_);
  std::swap(up_, other->up_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(w_, other->w_);
  std::swap(field_of_view_, other->field_of_view_);
  std::swap(aspect_ratio_, other->aspect_ratio_);
  std::swap(near_, other->near_);
  std::swap(far_, other->far_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camera_descriptor_;
  metadata.reflection = Camera_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Camera

// optional .ElVis.Serialization.Point eye = 1;
bool Camera::has_eye() const {
  return !_is_default_instance_ && eye_ != NULL;
}
void Camera::clear_eye() {
  if (GetArenaNoVirtual() == NULL && eye_ != NULL) delete eye_;
  eye_ = NULL;
}
const ::ElVis::Serialization::Point& Camera::eye() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.eye)
  return eye_ != NULL ? *eye_ : *default_instance_->eye_;
}
::ElVis::Serialization::Point* Camera::mutable_eye() {
  
  if (eye_ == NULL) {
    eye_ = new ::ElVis::Serialization::Point;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.Camera.eye)
  return eye_;
}
::ElVis::Serialization::Point* Camera::release_eye() {
  
  ::ElVis::Serialization::Point* temp = eye_;
  eye_ = NULL;
  return temp;
}
void Camera::set_allocated_eye(::ElVis::Serialization::Point* eye) {
  delete eye_;
  eye_ = eye;
  if (eye) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.Camera.eye)
}

// optional .ElVis.Serialization.Point lookAt = 2;
bool Camera::has_lookat() const {
  return !_is_default_instance_ && lookat_ != NULL;
}
void Camera::clear_lookat() {
  if (GetArenaNoVirtual() == NULL && lookat_ != NULL) delete lookat_;
  lookat_ = NULL;
}
const ::ElVis::Serialization::Point& Camera::lookat() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.lookAt)
  return lookat_ != NULL ? *lookat_ : *default_instance_->lookat_;
}
::ElVis::Serialization::Point* Camera::mutable_lookat() {
  
  if (lookat_ == NULL) {
    lookat_ = new ::ElVis::Serialization::Point;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.Camera.lookAt)
  return lookat_;
}
::ElVis::Serialization::Point* Camera::release_lookat() {
  
  ::ElVis::Serialization::Point* temp = lookat_;
  lookat_ = NULL;
  return temp;
}
void Camera::set_allocated_lookat(::ElVis::Serialization::Point* lookat) {
  delete lookat_;
  lookat_ = lookat;
  if (lookat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.Camera.lookAt)
}

// optional .ElVis.Serialization.Point up = 3;
bool Camera::has_up() const {
  return !_is_default_instance_ && up_ != NULL;
}
void Camera::clear_up() {
  if (GetArenaNoVirtual() == NULL && up_ != NULL) delete up_;
  up_ = NULL;
}
const ::ElVis::Serialization::Point& Camera::up() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.up)
  return up_ != NULL ? *up_ : *default_instance_->up_;
}
::ElVis::Serialization::Point* Camera::mutable_up() {
  
  if (up_ == NULL) {
    up_ = new ::ElVis::Serialization::Point;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.Camera.up)
  return up_;
}
::ElVis::Serialization::Point* Camera::release_up() {
  
  ::ElVis::Serialization::Point* temp = up_;
  up_ = NULL;
  return temp;
}
void Camera::set_allocated_up(::ElVis::Serialization::Point* up) {
  delete up_;
  up_ = up;
  if (up) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.Camera.up)
}

// optional .ElVis.Serialization.Point u = 4;
bool Camera::has_u() const {
  return !_is_default_instance_ && u_ != NULL;
}
void Camera::clear_u() {
  if (GetArenaNoVirtual() == NULL && u_ != NULL) delete u_;
  u_ = NULL;
}
const ::ElVis::Serialization::Point& Camera::u() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.u)
  return u_ != NULL ? *u_ : *default_instance_->u_;
}
::ElVis::Serialization::Point* Camera::mutable_u() {
  
  if (u_ == NULL) {
    u_ = new ::ElVis::Serialization::Point;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.Camera.u)
  return u_;
}
::ElVis::Serialization::Point* Camera::release_u() {
  
  ::ElVis::Serialization::Point* temp = u_;
  u_ = NULL;
  return temp;
}
void Camera::set_allocated_u(::ElVis::Serialization::Point* u) {
  delete u_;
  u_ = u;
  if (u) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.Camera.u)
}

// optional .ElVis.Serialization.Point v = 5;
bool Camera::has_v() const {
  return !_is_default_instance_ && v_ != NULL;
}
void Camera::clear_v() {
  if (GetArenaNoVirtual() == NULL && v_ != NULL) delete v_;
  v_ = NULL;
}
const ::ElVis::Serialization::Point& Camera::v() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.v)
  return v_ != NULL ? *v_ : *default_instance_->v_;
}
::ElVis::Serialization::Point* Camera::mutable_v() {
  
  if (v_ == NULL) {
    v_ = new ::ElVis::Serialization::Point;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.Camera.v)
  return v_;
}
::ElVis::Serialization::Point* Camera::release_v() {
  
  ::ElVis::Serialization::Point* temp = v_;
  v_ = NULL;
  return temp;
}
void Camera::set_allocated_v(::ElVis::Serialization::Point* v) {
  delete v_;
  v_ = v;
  if (v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.Camera.v)
}

// optional .ElVis.Serialization.Point w = 6;
bool Camera::has_w() const {
  return !_is_default_instance_ && w_ != NULL;
}
void Camera::clear_w() {
  if (GetArenaNoVirtual() == NULL && w_ != NULL) delete w_;
  w_ = NULL;
}
const ::ElVis::Serialization::Point& Camera::w() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.w)
  return w_ != NULL ? *w_ : *default_instance_->w_;
}
::ElVis::Serialization::Point* Camera::mutable_w() {
  
  if (w_ == NULL) {
    w_ = new ::ElVis::Serialization::Point;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.Camera.w)
  return w_;
}
::ElVis::Serialization::Point* Camera::release_w() {
  
  ::ElVis::Serialization::Point* temp = w_;
  w_ = NULL;
  return temp;
}
void Camera::set_allocated_w(::ElVis::Serialization::Point* w) {
  delete w_;
  w_ = w;
  if (w) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.Camera.w)
}

// optional double field_of_view = 7;
void Camera::clear_field_of_view() {
  field_of_view_ = 0;
}
 double Camera::field_of_view() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.field_of_view)
  return field_of_view_;
}
 void Camera::set_field_of_view(double value) {
  
  field_of_view_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.Camera.field_of_view)
}

// optional double aspect_ratio = 8;
void Camera::clear_aspect_ratio() {
  aspect_ratio_ = 0;
}
 double Camera::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.aspect_ratio)
  return aspect_ratio_;
}
 void Camera::set_aspect_ratio(double value) {
  
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.Camera.aspect_ratio)
}

// optional float near = 9;
void Camera::clear_near() {
  near_ = 0;
}
 float Camera::near() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.near)
  return near_;
}
 void Camera::set_near(float value) {
  
  near_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.Camera.near)
}

// optional float far = 10;
void Camera::clear_far() {
  far_ = 0;
}
 float Camera::far() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.Camera.far)
  return far_;
}
 void Camera::set_far(float value) {
  
  far_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.Camera.far)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)
