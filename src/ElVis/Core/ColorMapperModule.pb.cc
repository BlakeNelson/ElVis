// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ColorMapperModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ColorMapperModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

namespace {

const ::google::protobuf::Descriptor* ColorMapperModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorMapperModule_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ColorMapperModule_2eproto() {
  protobuf_AddDesc_ColorMapperModule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ColorMapperModule.proto");
  GOOGLE_CHECK(file != NULL);
  ColorMapperModule_descriptor_ = file->message_type(0);
  static const int ColorMapperModule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapperModule, color_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapperModule, size_),
  };
  ColorMapperModule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColorMapperModule_descriptor_,
      ColorMapperModule::default_instance_,
      ColorMapperModule_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColorMapperModule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapperModule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorMapperModule, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ColorMapperModule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColorMapperModule_descriptor_, &ColorMapperModule::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ColorMapperModule_2eproto() {
  delete ColorMapperModule::default_instance_;
  delete ColorMapperModule_reflection_;
}

void protobuf_AddDesc_ColorMapperModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ElVis::Serialization::protobuf_AddDesc_ColorMap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ColorMapperModule.proto\022\023ElVis.Seriali"
    "zation\032\016ColorMap.proto\"S\n\021ColorMapperMod"
    "ule\0220\n\tcolor_map\030\001 \001(\0132\035.ElVis.Serializa"
    "tion.ColorMap\022\014\n\004size\030\002 \001(\rb\006proto3", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ColorMapperModule.proto", &protobuf_RegisterTypes);
  ColorMapperModule::default_instance_ = new ColorMapperModule();
  ColorMapperModule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ColorMapperModule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ColorMapperModule_2eproto {
  StaticDescriptorInitializer_ColorMapperModule_2eproto() {
    protobuf_AddDesc_ColorMapperModule_2eproto();
  }
} static_descriptor_initializer_ColorMapperModule_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ColorMapperModule::kColorMapFieldNumber;
const int ColorMapperModule::kSizeFieldNumber;
#endif  // !_MSC_VER

ColorMapperModule::ColorMapperModule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElVis.Serialization.ColorMapperModule)
}

void ColorMapperModule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  color_map_ = const_cast< ::ElVis::Serialization::ColorMap*>(&::ElVis::Serialization::ColorMap::default_instance());
}

ColorMapperModule::ColorMapperModule(const ColorMapperModule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElVis.Serialization.ColorMapperModule)
}

void ColorMapperModule::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  color_map_ = NULL;
  size_ = 0u;
}

ColorMapperModule::~ColorMapperModule() {
  // @@protoc_insertion_point(destructor:ElVis.Serialization.ColorMapperModule)
  SharedDtor();
}

void ColorMapperModule::SharedDtor() {
  if (this != default_instance_) {
    delete color_map_;
  }
}

void ColorMapperModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorMapperModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorMapperModule_descriptor_;
}

const ColorMapperModule& ColorMapperModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ColorMapperModule_2eproto();
  return *default_instance_;
}

ColorMapperModule* ColorMapperModule::default_instance_ = NULL;

ColorMapperModule* ColorMapperModule::New(::google::protobuf::Arena* arena) const {
  ColorMapperModule* n = new ColorMapperModule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorMapperModule::Clear() {
  if (GetArenaNoVirtual() == NULL && color_map_ != NULL) delete color_map_;
  color_map_ = NULL;
  size_ = 0u;
}

bool ColorMapperModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElVis.Serialization.ColorMapperModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ElVis.Serialization.ColorMap color_map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElVis.Serialization.ColorMapperModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElVis.Serialization.ColorMapperModule)
  return false;
#undef DO_
}

void ColorMapperModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElVis.Serialization.ColorMapperModule)
  // optional .ElVis.Serialization.ColorMap color_map = 1;
  if (this->has_color_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_map_, output);
  }

  // optional uint32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // @@protoc_insertion_point(serialize_end:ElVis.Serialization.ColorMapperModule)
}

::google::protobuf::uint8* ColorMapperModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElVis.Serialization.ColorMapperModule)
  // optional .ElVis.Serialization.ColorMap color_map = 1;
  if (this->has_color_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->color_map_, target);
  }

  // optional uint32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ElVis.Serialization.ColorMapperModule)
  return target;
}

int ColorMapperModule::ByteSize() const {
  int total_size = 0;

  // optional .ElVis.Serialization.ColorMap color_map = 1;
  if (this->has_color_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_map_);
  }

  // optional uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorMapperModule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ColorMapperModule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColorMapperModule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorMapperModule::MergeFrom(const ColorMapperModule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_color_map()) {
    mutable_color_map()->::ElVis::Serialization::ColorMap::MergeFrom(from.color_map());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void ColorMapperModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMapperModule::CopyFrom(const ColorMapperModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMapperModule::IsInitialized() const {

  return true;
}

void ColorMapperModule::Swap(ColorMapperModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorMapperModule::InternalSwap(ColorMapperModule* other) {
  std::swap(color_map_, other->color_map_);
  std::swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColorMapperModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorMapperModule_descriptor_;
  metadata.reflection = ColorMapperModule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorMapperModule

// optional .ElVis.Serialization.ColorMap color_map = 1;
bool ColorMapperModule::has_color_map() const {
  return !_is_default_instance_ && color_map_ != NULL;
}
void ColorMapperModule::clear_color_map() {
  if (GetArenaNoVirtual() == NULL && color_map_ != NULL) delete color_map_;
  color_map_ = NULL;
}
const ::ElVis::Serialization::ColorMap& ColorMapperModule::color_map() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMapperModule.color_map)
  return color_map_ != NULL ? *color_map_ : *default_instance_->color_map_;
}
::ElVis::Serialization::ColorMap* ColorMapperModule::mutable_color_map() {
  
  if (color_map_ == NULL) {
    color_map_ = new ::ElVis::Serialization::ColorMap;
  }
  // @@protoc_insertion_point(field_mutable:ElVis.Serialization.ColorMapperModule.color_map)
  return color_map_;
}
::ElVis::Serialization::ColorMap* ColorMapperModule::release_color_map() {
  
  ::ElVis::Serialization::ColorMap* temp = color_map_;
  color_map_ = NULL;
  return temp;
}
void ColorMapperModule::set_allocated_color_map(::ElVis::Serialization::ColorMap* color_map) {
  delete color_map_;
  color_map_ = color_map;
  if (color_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ElVis.Serialization.ColorMapperModule.color_map)
}

// optional uint32 size = 2;
void ColorMapperModule::clear_size() {
  size_ = 0u;
}
 ::google::protobuf::uint32 ColorMapperModule::size() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.ColorMapperModule.size)
  return size_;
}
 void ColorMapperModule::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.ColorMapperModule.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)
