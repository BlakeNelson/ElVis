// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IsosurfaceModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IsosurfaceModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

namespace {

const ::google::protobuf::Descriptor* IsosurfaceModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsosurfaceModule_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IsosurfaceModule_2eproto() {
  protobuf_AddDesc_IsosurfaceModule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IsosurfaceModule.proto");
  GOOGLE_CHECK(file != NULL);
  IsosurfaceModule_descriptor_ = file->message_type(0);
  static const int IsosurfaceModule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsosurfaceModule, isovalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsosurfaceModule, epsilon_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsosurfaceModule, projection_order_),
  };
  IsosurfaceModule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IsosurfaceModule_descriptor_,
      IsosurfaceModule::default_instance_,
      IsosurfaceModule_offsets_,
      -1,
      -1,
      -1,
      sizeof(IsosurfaceModule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsosurfaceModule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsosurfaceModule, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IsosurfaceModule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IsosurfaceModule_descriptor_, &IsosurfaceModule::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IsosurfaceModule_2eproto() {
  delete IsosurfaceModule::default_instance_;
  delete IsosurfaceModule_reflection_;
}

void protobuf_AddDesc_IsosurfaceModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026IsosurfaceModule.proto\022\023ElVis.Serializ"
    "ation\"Y\n\020IsosurfaceModule\022\021\n\tisovalues\030\001"
    " \003(\002\022\030\n\020epsilon_exponent\030\002 \001(\005\022\030\n\020projec"
    "tion_order\030\003 \001(\005b\006proto3", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IsosurfaceModule.proto", &protobuf_RegisterTypes);
  IsosurfaceModule::default_instance_ = new IsosurfaceModule();
  IsosurfaceModule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IsosurfaceModule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IsosurfaceModule_2eproto {
  StaticDescriptorInitializer_IsosurfaceModule_2eproto() {
    protobuf_AddDesc_IsosurfaceModule_2eproto();
  }
} static_descriptor_initializer_IsosurfaceModule_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int IsosurfaceModule::kIsovaluesFieldNumber;
const int IsosurfaceModule::kEpsilonExponentFieldNumber;
const int IsosurfaceModule::kProjectionOrderFieldNumber;
#endif  // !_MSC_VER

IsosurfaceModule::IsosurfaceModule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ElVis.Serialization.IsosurfaceModule)
}

void IsosurfaceModule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IsosurfaceModule::IsosurfaceModule(const IsosurfaceModule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ElVis.Serialization.IsosurfaceModule)
}

void IsosurfaceModule::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  epsilon_exponent_ = 0;
  projection_order_ = 0;
}

IsosurfaceModule::~IsosurfaceModule() {
  // @@protoc_insertion_point(destructor:ElVis.Serialization.IsosurfaceModule)
  SharedDtor();
}

void IsosurfaceModule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsosurfaceModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsosurfaceModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsosurfaceModule_descriptor_;
}

const IsosurfaceModule& IsosurfaceModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IsosurfaceModule_2eproto();
  return *default_instance_;
}

IsosurfaceModule* IsosurfaceModule::default_instance_ = NULL;

IsosurfaceModule* IsosurfaceModule::New(::google::protobuf::Arena* arena) const {
  IsosurfaceModule* n = new IsosurfaceModule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsosurfaceModule::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IsosurfaceModule*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(epsilon_exponent_, projection_order_);

#undef ZR_HELPER_
#undef ZR_

  isovalues_.Clear();
}

bool IsosurfaceModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ElVis.Serialization.IsosurfaceModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float isovalues = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_isovalues())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_isovalues())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epsilon_exponent;
        break;
      }

      // optional int32 epsilon_exponent = 2;
      case 2: {
        if (tag == 16) {
         parse_epsilon_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epsilon_exponent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_projection_order;
        break;
      }

      // optional int32 projection_order = 3;
      case 3: {
        if (tag == 24) {
         parse_projection_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projection_order_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ElVis.Serialization.IsosurfaceModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ElVis.Serialization.IsosurfaceModule)
  return false;
#undef DO_
}

void IsosurfaceModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ElVis.Serialization.IsosurfaceModule)
  // repeated float isovalues = 1;
  if (this->isovalues_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_isovalues_cached_byte_size_);
  }
  for (int i = 0; i < this->isovalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->isovalues(i), output);
  }

  // optional int32 epsilon_exponent = 2;
  if (this->epsilon_exponent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->epsilon_exponent(), output);
  }

  // optional int32 projection_order = 3;
  if (this->projection_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->projection_order(), output);
  }

  // @@protoc_insertion_point(serialize_end:ElVis.Serialization.IsosurfaceModule)
}

::google::protobuf::uint8* IsosurfaceModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ElVis.Serialization.IsosurfaceModule)
  // repeated float isovalues = 1;
  if (this->isovalues_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _isovalues_cached_byte_size_, target);
  }
  for (int i = 0; i < this->isovalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->isovalues(i), target);
  }

  // optional int32 epsilon_exponent = 2;
  if (this->epsilon_exponent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->epsilon_exponent(), target);
  }

  // optional int32 projection_order = 3;
  if (this->projection_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->projection_order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ElVis.Serialization.IsosurfaceModule)
  return target;
}

int IsosurfaceModule::ByteSize() const {
  int total_size = 0;

  // optional int32 epsilon_exponent = 2;
  if (this->epsilon_exponent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epsilon_exponent());
  }

  // optional int32 projection_order = 3;
  if (this->projection_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->projection_order());
  }

  // repeated float isovalues = 1;
  {
    int data_size = 0;
    data_size = 4 * this->isovalues_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isovalues_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsosurfaceModule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IsosurfaceModule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IsosurfaceModule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsosurfaceModule::MergeFrom(const IsosurfaceModule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  isovalues_.MergeFrom(from.isovalues_);
  if (from.epsilon_exponent() != 0) {
    set_epsilon_exponent(from.epsilon_exponent());
  }
  if (from.projection_order() != 0) {
    set_projection_order(from.projection_order());
  }
}

void IsosurfaceModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsosurfaceModule::CopyFrom(const IsosurfaceModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsosurfaceModule::IsInitialized() const {

  return true;
}

void IsosurfaceModule::Swap(IsosurfaceModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsosurfaceModule::InternalSwap(IsosurfaceModule* other) {
  isovalues_.UnsafeArenaSwap(&other->isovalues_);
  std::swap(epsilon_exponent_, other->epsilon_exponent_);
  std::swap(projection_order_, other->projection_order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsosurfaceModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsosurfaceModule_descriptor_;
  metadata.reflection = IsosurfaceModule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsosurfaceModule

// repeated float isovalues = 1;
int IsosurfaceModule::isovalues_size() const {
  return isovalues_.size();
}
void IsosurfaceModule::clear_isovalues() {
  isovalues_.Clear();
}
 float IsosurfaceModule::isovalues(int index) const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.IsosurfaceModule.isovalues)
  return isovalues_.Get(index);
}
 void IsosurfaceModule::set_isovalues(int index, float value) {
  isovalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:ElVis.Serialization.IsosurfaceModule.isovalues)
}
 void IsosurfaceModule::add_isovalues(float value) {
  isovalues_.Add(value);
  // @@protoc_insertion_point(field_add:ElVis.Serialization.IsosurfaceModule.isovalues)
}
 const ::google::protobuf::RepeatedField< float >&
IsosurfaceModule::isovalues() const {
  // @@protoc_insertion_point(field_list:ElVis.Serialization.IsosurfaceModule.isovalues)
  return isovalues_;
}
 ::google::protobuf::RepeatedField< float >*
IsosurfaceModule::mutable_isovalues() {
  // @@protoc_insertion_point(field_mutable_list:ElVis.Serialization.IsosurfaceModule.isovalues)
  return &isovalues_;
}

// optional int32 epsilon_exponent = 2;
void IsosurfaceModule::clear_epsilon_exponent() {
  epsilon_exponent_ = 0;
}
 ::google::protobuf::int32 IsosurfaceModule::epsilon_exponent() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.IsosurfaceModule.epsilon_exponent)
  return epsilon_exponent_;
}
 void IsosurfaceModule::set_epsilon_exponent(::google::protobuf::int32 value) {
  
  epsilon_exponent_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.IsosurfaceModule.epsilon_exponent)
}

// optional int32 projection_order = 3;
void IsosurfaceModule::clear_projection_order() {
  projection_order_ = 0;
}
 ::google::protobuf::int32 IsosurfaceModule::projection_order() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.IsosurfaceModule.projection_order)
  return projection_order_;
}
 void IsosurfaceModule::set_projection_order(::google::protobuf::int32 value) {
  
  projection_order_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.IsosurfaceModule.projection_order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)
