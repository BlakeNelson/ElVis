// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IsosurfaceModule.proto

#ifndef PROTOBUF_IsosurfaceModule_2eproto__INCLUDED
#define PROTOBUF_IsosurfaceModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ElVis {
namespace Serialization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_IsosurfaceModule_2eproto();
void protobuf_AssignDesc_IsosurfaceModule_2eproto();
void protobuf_ShutdownFile_IsosurfaceModule_2eproto();

class IsosurfaceModule;

// ===================================================================

class IsosurfaceModule : public ::google::protobuf::Message {
 public:
  IsosurfaceModule();
  virtual ~IsosurfaceModule();

  IsosurfaceModule(const IsosurfaceModule& from);

  inline IsosurfaceModule& operator=(const IsosurfaceModule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsosurfaceModule& default_instance();

  void Swap(IsosurfaceModule* other);

  // implements Message ----------------------------------------------

  inline IsosurfaceModule* New() const { return New(NULL); }

  IsosurfaceModule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsosurfaceModule& from);
  void MergeFrom(const IsosurfaceModule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsosurfaceModule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float isovalues = 1;
  int isovalues_size() const;
  void clear_isovalues();
  static const int kIsovaluesFieldNumber = 1;
  float isovalues(int index) const;
  void set_isovalues(int index, float value);
  void add_isovalues(float value);
  const ::google::protobuf::RepeatedField< float >&
      isovalues() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_isovalues();

  // optional int32 epsilon_exponent = 2;
  void clear_epsilon_exponent();
  static const int kEpsilonExponentFieldNumber = 2;
  ::google::protobuf::int32 epsilon_exponent() const;
  void set_epsilon_exponent(::google::protobuf::int32 value);

  // optional int32 projection_order = 3;
  void clear_projection_order();
  static const int kProjectionOrderFieldNumber = 3;
  ::google::protobuf::int32 projection_order() const;
  void set_projection_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ElVis.Serialization.IsosurfaceModule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > isovalues_;
  mutable int _isovalues_cached_byte_size_;
  ::google::protobuf::int32 epsilon_exponent_;
  ::google::protobuf::int32 projection_order_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_IsosurfaceModule_2eproto();
  friend void protobuf_AssignDesc_IsosurfaceModule_2eproto();
  friend void protobuf_ShutdownFile_IsosurfaceModule_2eproto();

  void InitAsDefaultInstance();
  static IsosurfaceModule* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IsosurfaceModule

// repeated float isovalues = 1;
inline int IsosurfaceModule::isovalues_size() const {
  return isovalues_.size();
}
inline void IsosurfaceModule::clear_isovalues() {
  isovalues_.Clear();
}
inline float IsosurfaceModule::isovalues(int index) const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.IsosurfaceModule.isovalues)
  return isovalues_.Get(index);
}
inline void IsosurfaceModule::set_isovalues(int index, float value) {
  isovalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:ElVis.Serialization.IsosurfaceModule.isovalues)
}
inline void IsosurfaceModule::add_isovalues(float value) {
  isovalues_.Add(value);
  // @@protoc_insertion_point(field_add:ElVis.Serialization.IsosurfaceModule.isovalues)
}
inline const ::google::protobuf::RepeatedField< float >&
IsosurfaceModule::isovalues() const {
  // @@protoc_insertion_point(field_list:ElVis.Serialization.IsosurfaceModule.isovalues)
  return isovalues_;
}
inline ::google::protobuf::RepeatedField< float >*
IsosurfaceModule::mutable_isovalues() {
  // @@protoc_insertion_point(field_mutable_list:ElVis.Serialization.IsosurfaceModule.isovalues)
  return &isovalues_;
}

// optional int32 epsilon_exponent = 2;
inline void IsosurfaceModule::clear_epsilon_exponent() {
  epsilon_exponent_ = 0;
}
inline ::google::protobuf::int32 IsosurfaceModule::epsilon_exponent() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.IsosurfaceModule.epsilon_exponent)
  return epsilon_exponent_;
}
inline void IsosurfaceModule::set_epsilon_exponent(::google::protobuf::int32 value) {
  
  epsilon_exponent_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.IsosurfaceModule.epsilon_exponent)
}

// optional int32 projection_order = 3;
inline void IsosurfaceModule::clear_projection_order() {
  projection_order_ = 0;
}
inline ::google::protobuf::int32 IsosurfaceModule::projection_order() const {
  // @@protoc_insertion_point(field_get:ElVis.Serialization.IsosurfaceModule.projection_order)
  return projection_order_;
}
inline void IsosurfaceModule::set_projection_order(::google::protobuf::int32 value) {
  
  projection_order_ = value;
  // @@protoc_insertion_point(field_set:ElVis.Serialization.IsosurfaceModule.projection_order)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization
}  // namespace ElVis

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IsosurfaceModule_2eproto__INCLUDED
